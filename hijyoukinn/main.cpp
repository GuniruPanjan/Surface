#include<Dxlib.h>
#include<cassert>

//デバッグはまずはブレークポイントの使い方を覚えろ
//ブレークポイントで中断するとローカル変数が表示されてるからおかしな値を見つけられる
//出力を見ると何かが失敗するとDxLibがログを吐いてくれる
//中断したところからF10で1行1行実行していく
//ただしReleaseモードでは有効ではありません
//一つは、デバッグ情報がないため関数名が分からないし値も分からない
//二つ目は、プログラムが順番に実行されない
//F11で関数の中に入っていく（自作の関数:ライブラリの中には入れない）
//デバッグカーソルはドラッグして移動できる
//ブレーク中に変数にマウスポインタを合わせると中身を見れるしクリックで値の変更が可能
//ブレークポイントで右クリックして、条件を追加することができる条件を満たしたときにのみ、処理を中断する
//データブレークポイントというものがある→特定のメモリの内容が書き変わった中断
//一度実行を始めてからじゃないとメモリの番地が確定しないため実行中でないと設置できない
//プログラムのどこで内容を書き換えてるのかが分からないが、いじられていることがあるそういう場合には、データブレイクポイントが有効です
//呼び出し履歴も活用しようブレークしたところを

//Debug:デバッグしやすい代わりに遅い（余計な情報が含まれている）
//Release:速い代わりにデバッグしづらい
//企業やGFFに提出するアプリはReleaseで提出しましょう
//DebugとReleaseは別々の設定などで注意しよう
void Sub(int& left, const int& right)
{
	left = right;
}
void Function()
{
	int j = 0;
	for (int i = 0; i < 10000; i++)
	{
		j = i;
	}
}
//Warningがあってもプログラムは動くが、できるだけ減らそう
//mainやWinMainも関数なので、戻り値が必要です
//0:正常終了
//-1:異常終了

//対処のしづらさランキング
//1.実行はできるし、クラッシュもない、でも動作がおかしい
//2.ある程度実行して動作するけど、ある時クラッシュする
//3.リンカエラー
//4.コンパイラエラー
//「間違っているときは、人為的にでも一刻も早くクラッシュさせよう！」
//Debugの時は、積極的にクラッシュさせて
//Releaseの時は、クラッシュさせないで

//assert関数
//assert(条件式);
//この条件の中身が真（true）の時以外つまり偽（false）の時に人為的にクラッシュを発生させます
//バグではないが「明らかに間違っている状況」に対して、クラッシュを起こすために使います

int MyLoadGraph(const wchar_t* path)
{
	int handle = LoadGraph(path);
	assert(handle > 0);
	return handle;
}
//コンソールはMain関数　WindowsはWinMain関数
int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int)
{ 
	ChangeWindowMode(true);   //falseはフルスクリーン、trueは非フルスクリーン
	if (DxLib_Init() == -1)
	{
		//初期化に失敗したらアプリを落とす
		return -1;  //このアプリは異常終了しました
	}
	Function();

	//実は表示される描画先には2枚のスクリーンがあります
	//これを高速でフリップ（入れ替え）を行うことで
	//画面のちらつきをなくしています
	//SetDrawScreen等の関数はDxLib_Init()後じゃないと
	//有効ではないため注意してください

	int a[] = {1,3,4,8,2,5,3,6,2 };

	auto result = SetDrawScreen(DX_SCREEN_BACK);

	a[5]++;

	Function();

	while (ProcessMessage() != -1)
	{
		ClearDrawScreen();
		ScreenFlip();
	}
	DxLib_End();
	return 0;  //このアプリは正常終了しました
}
